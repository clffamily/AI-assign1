from taskscheduling import *



'''----------------------------------------------------------------------
   Definitions of three sample instances that you will run your code. 
   Do not change these! 
   You are strongly encouraged to also test your code with other fuelmazes
     of various sizes and start/goal positions (simply add
    more fuelmazes to the list).
-------------------------------------------------------------------------'''
if __name__ == "__main__":

    from search import *

    schedulingproblems = [
       
        TaskScheduling(
            [('c1', 10), ('c2', 15) , ('c3', 17) ,('c4', 14) ],
            [
                ('j1','c1',3,3, [(8,10)]),
                ('j2','c1',12,3,[(15,15)]),
                ('j3','c2',5,3, [(12,15)]),
                ('j4','c2',15,3,[(15,15)]),
                ('j5','c3',6,3, [(10,5)]),
                ('j6','c4',6,3, [(10,10)])
                ],
            'c1'
        ),
        TaskScheduling(#Note, the time 10 cost can not be incurred for this question
            [('c1', 10)],
            [
                ('j1', 'c1',0,1, [(1,1),(2,4),(3,9),(4,16),(5,25),(6,36),(7,49),(8,64),(9,81),(10,100)]),                
                ('j2', 'c1',0,1, [(1,1),(2,5),(3,9),(4,13),(5,17),(6,21),(7,25),(8,29),(9,33),(10,37)]),                
                ('j3', 'c1',0,1, [(1,2),(2,4),(3,6),(4,8),(5,10),(6,12),(7,14),(8,16),(9,18),(10,20)]),                
                ('j4', 'c1',0,1, [(1,4),(2,5),(3,6),(4,7),(5,8),(6,9),(7,10),(8,20),(9,30),(10,40)]),                
                ('j5', 'c1',0,1, [(1,10),(3,11),(5,12),(7,13),(9,14)]),                
                ('j6', 'c1',0,1, [(2,1),(3,2),(4,4),(5,8),(6,16),(7,32),(8,64),(9,128),(10,256)]),                
                ('j7', 'c1',0,1, [(1,1),(3,2),(4,3),(5,5),(6,8),(7,13),(8,21),(9,34),(10,55)]),                
                ('j8', 'c1',0,1, [(1,3),(2,6),(3,9),(4,12),(5,15),(6,18),(7,21),(8,24),(9,27),(10,30)]),                
                ('j9', 'c1',0,1, [(1,8),(2,9),(3,10),(4,11),(5,12),(6,13),(7,14),(8,15),(9,160),(10,17)]),                
                ('j10','c1',0,1, [(1,1),(2,2),(3,3),(4,10),(5,20),(6,30),(7,80),(8,90),(9,100),(10,110)]),                
            ],
            'c1'         
        ),
        TaskScheduling(
            [('c0', 100),('c1', 3),('c2', 3),('c3', 3)],
            [
                ('j1', 'c1',0 ,3, [(12,10)]),                
                ('j2', 'c1',0 ,8, [(15,2)]),                
                ('j3', 'c1',10,4, [(10,5)]),                
                ('j4', 'c2',0 ,2, [(14,12)]),                
                ('j5', 'c2',0 ,9, [(16,3)]),                
                ('j6', 'c2',15,5, [(15,2)]),                
                ('j7', 'c3',0 ,3, [(15,13)]),                
                ('j8', 'c3',0 ,10,[(17,2)]),                
                ('j9', 'c3',20,4, [(20,6)])
                
            ],
            'c0'         
         ),
        TaskScheduling(
            [('c0',5),('c1',5),('c2', 30)],
            [
                ('j1', 'c0',10 ,9, [(30,1),(40,2)]),                
                ('j2', 'c0',30 ,9, [(40,1)]),                
                ('j3', 'c0',40 ,9, [(50,1)]),                
                ('j4', 'c1',0  ,9, [(20,1),(30,2)]),                
                ('j5', 'c1',20 ,9, [(30,1)]),                
                ('j6', 'c1',30, 9, [(34,1)]),                
                ('j7', 'c2',20 ,9, [(40,3),(60,6)]),                
                ('j8', 'c2',40 ,9, [(60,3),(80,6)]),                
                ('j9', 'c2',60, 9, [(70,3)])
                
            ],
            'c0'         
         )


        ]
                
                          
        
    
    heuristics = [
              ('Uniform heuristic', h_uniform),         
              ('Custom heuristic', h_custom) ]

    # Set this to >=1 to get increasingly informative search statistics
    trace = 1

    
    for m in range(len(schedulingproblems)):        
        
        currentproblem = schedulingproblems[m]
        
        for (hname, h) in heuristics:

            currentproblem.set_heuristic(h)

            print("====================================================")
            print("TaskScheduling {}, {}, A* with cycle checking".format(m+1, hname))
            node = astar_search(currentproblem, FullCheck(), trace)
            
            print("====================================================")
            print("")
